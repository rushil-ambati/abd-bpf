#!/usr/bin/env bash
set -euo pipefail

cd "$(dirname "$0")/.."

NUM_NODES=3
DEBUG=0
WAIT_FOR_SERVICES=0
USERSPACE=0
TESTENV=(sudo -n scripts/testenv/testenv.sh)

sudo -v || {
  echo "need sudo"
  exit 1
}

declare -a bg_pids
mkdir -p logs
rm -f logs/*

# Run a background command and log to file
run_bg() {
  local name=$1
  shift
  local logfile="logs/${name}.log"
  : >"$logfile"
  "$@" >"$logfile" 2>&1 &
  bg_pids+=($!)
}

cleanup() {
  for pid in "${bg_pids[@]}"; do
    kill "$pid" 2>/dev/null || true
    wait "$pid" 2>/dev/null || true
  done
}
trap cleanup EXIT SIGINT SIGTERM

usage() {
  echo "Usage: $0 [-s NUM_NODES] [-d] [-w] [-u]" >&2
  echo "  -s NUM_NODES  Number of replica nodes (default: 3)"
  echo "  -d            Use debug build"
  echo "  -w            Wait for background services after client finishes"
  echo "  -u            Use userspace implementation instead of eBPF"
  exit 1
}

while getopts "s:dwu" opt; do
  case $opt in
  s) NUM_NODES=$OPTARG ;;
  d) DEBUG=1 ;;
  w) WAIT_FOR_SERVICES=1 ;;
  u) USERSPACE=1 ;;
  *) usage ;;
  esac
done

if [[ "$DEBUG" -eq 1 ]]; then
  TARGET_DIR="target/debug"
  cargo build --quiet
else
  TARGET_DIR="target/release"
  cargo build --release --quiet
fi

# Setup network namespaces
for env in $(seq 1 "$NUM_NODES" | sed 's/^/node/'); do
  "${TESTENV[@]}" setup --name "$env" --legacy-ip >/dev/null 2>&1 || true

  "${TESTENV[@]}" exec -n "$env" -- \
    bash -c "ethtool -K veth0 tx-checksum-ip-generic off >/dev/null 2>&1 || true"

  run_bg "xdp_pass_$env" "${TESTENV[@]}" exec -n "$env" -- \
    bash -c "RUST_LOG=off $TARGET_DIR/xdp-pass --iface veth0"
done

# Launch each node
for i in $(seq 1 "$NUM_NODES"); do
  if [[ "$USERSPACE" -eq 0 ]]; then
    run_bg "node$i" sudo -E bash -c \
      "RUST_LOG=info $TARGET_DIR/abd-ebpf --node-id $i --num-nodes=$NUM_NODES"
  else
    run_bg "node$i" sudo -E bash -c \
      "RUST_LOG=info $TARGET_DIR/abd-userspace --node-id $i --num-nodes=$NUM_NODES"
  fi
done

sleep 1
echo

# Run benchmark in foreground and log to file
bench_log="logs/bench_latency.log"
: >"$bench_log"
sudo -E bash -c "RUST_LOG=info $TARGET_DIR/bench latency --num-nodes $NUM_NODES" 2>&1 | tee "$bench_log"

echo

# Optional: wait if requested
if [[ "$WAIT_FOR_SERVICES" -eq 1 ]]; then
  wait
fi
