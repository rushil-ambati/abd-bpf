#!/usr/bin/env bash
set -euo pipefail

# Run from project root
cd "$(dirname "$0")/.."

NUM_NODES=3
DEBUG=0
WAIT_FOR_SERVICES=0
TESTENV=(sudo -n scripts/testenv/testenv.sh)

sudo -v || {
  echo "need sudo"
  exit 1
}

bg_pids=()
mkdir -p logs
rm -f logs/*

# Run command in background, tee its log, optionally stream to stdout
# Usage: run_bg [--no-tail] <name> <command...>
run_bg() {
  local tail=true
  if [[ "$1" == "--no-tail" ]]; then
    tail=false
    shift
  fi

  local name=$1
  shift

  local logfile="logs/${name}.log"
  : >"$logfile"

  "$@" >"$logfile" 2>&1 &
  bg_pids+=($!)

  if $tail; then
    tail -F "$logfile" &
    bg_pids+=($!)
  fi
}

# Global arrays to track background PIDs and tailed logs
declare -a bg_pids
declare -A tailed_logs

# Run a foreground command, tee its log, stream it live (optional), and wait only for the command
# Usage: run_bg_and_wait [--no-tail] <name> <command...>
run_bg_and_wait() {
  local tail=true
  if [[ "$1" == "--no-tail" ]]; then
    tail=false
    shift
  fi

  local name=$1
  shift
  local logfile="logs/${name}.log"
  mkdir -p logs
  : >>"$logfile"

  if $tail && [[ ! -v tailed_logs["$logfile"] ]]; then
    tail -F "$logfile" &
    local tail_pid=$!
    bg_pids+=("$tail_pid")
    tailed_logs["$logfile"]=$tail_pid
  fi

  "$@" >>"$logfile" 2>&1 &
  local cmd_pid=$!
  wait "$cmd_pid"
}

cleanup() {
  for pid in "${bg_pids[@]}"; do
    kill "$pid" 2>/dev/null || true
    wait "$pid" 2>/dev/null || true
  done
}
trap cleanup EXIT SIGINT SIGTERM

usage() {
  echo "Usage: $0 [-s NUM_NODES] [-d] [-w]" >&2
  echo "  -s NUM_NODES  Number of replica nodes (default: 3)"
  echo "  -d              Use debug build"
  echo "  -w              Wait for background services after client finishes"
  exit 1
}

# Parse args
while getopts "s:dw" opt; do
  case $opt in
  s) NUM_NODES=$OPTARG ;;
  d) DEBUG=1 ;;
  w) WAIT_FOR_SERVICES=1 ;;
  *) usage ;;
  esac
done

if [[ "$DEBUG" -eq 1 ]]; then
  TARGET_DIR="target/debug"
  cargo build --quiet
else
  TARGET_DIR="target/release"
  cargo build --release --quiet
fi

# Setup network namespaces
for env in $(seq 1 "$NUM_NODES" | sed 's/^/node/'); do
  "${TESTENV[@]}" setup --name "$env" --legacy-ip >/dev/null 2>&1 || true

  # Disable UDP TX checksum offloading
  "${TESTENV[@]}" exec -n "$env" -- \
    bash -c "ethtool -K veth0 tx-checksum-ip-generic off >/dev/null 2>&1 || true"

  # For redirect/transmit to work, there must be an XDP program attached to all veth peers
  run_bg --no-tail "xdp_pass_$env" "${TESTENV[@]}" exec -n "$env" -- \
    bash -c "RUST_LOG=warn $TARGET_DIR/xdp-pass --iface veth0"
done

# Bring up each node
for i in $(seq 1 "$NUM_NODES"); do
  # run_bg --no-tail "node$i" sudo -E bash -c \
  #   "RUST_LOG=info $TARGET_DIR/abd-ebpf \
  #     --node-id $i --num-nodes=$NUM_NODES"

  run_bg --no-tail "node$i" sudo -E bash -c \
    "RUST_LOG=info $TARGET_DIR/abd-userspace \
      --node-id $i --num-nodes=$NUM_NODES"
done

# Wait for nodes to be ready
sleep 1
echo

# value_base="int=42 text=hello ip=192.168.1.100 duration=5 point=(1.5,2.0) char_opt=Z person=(Bob,27)"
value_base="int=88 text=world ip=2001:0db8:85a3:0000:0000:8a2e:0370:7334 duration=3600 point=(-0.3,4.1) person=(Alice,30)"
for i in $(seq 1 "$NUM_NODES"); do
  env="node$i"
  node_ip=$(
    "${TESTENV[@]}" -n "$env" status |
      awk '/Iface:/ {print $4}' |
      cut -d'/' -f1
  )

  val="$value_base hashmap={author:node$i;version:1.0;license:MIT}"

  # Write from node i
  # run_bg_and_wait "client" "${TESTENV[@]}" exec -n "$env" -- bash -c "
  #   RUST_LOG=info $TARGET_DIR/client write $node_ip \"$val\""
  # echo

  run_bg_and_wait "client" bash -c "RUST_LOG=info $TARGET_DIR/client write $node_ip \"$val\""
  # run_bg_and_wait "client" bash -c "RUST_LOG=info $TARGET_DIR/client write $node_ip \"$val\" --server --sender-id 1 --counter 1 --tag 1"
  echo

  # run_bg_and_wait "client" bash -c "RUST_LOG=info $TARGET_DIR/client read $node_ip --server --sender-id 1 --counter 2"
  run_bg_and_wait "client" bash -c "RUST_LOG=info $TARGET_DIR/client read $node_ip"
  # echo

  # # Read from all nodes
  # for j in $(seq 1 "$NUM_NODES"); do
  #   read_env="node$j"
  #   read_ip=$(
  #     "${TESTENV[@]}" -n "$read_env" status |
  #       awk '/Iface:/ {print $4}' |
  #       cut -d'/' -f1
  #   )

  #   run_bg_and_wait "client" "${TESTENV[@]}" exec -n "$read_env" -- bash -c "
  #     RUST_LOG=info $TARGET_DIR/client read $read_ip"
  #   echo
  # done
done

# Leave the services running if requested
if [[ "$WAIT_FOR_SERVICES" -eq 1 ]]; then
  wait
fi
