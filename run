#!/usr/bin/env bash
set -euo pipefail

NUM_SERVERS=1
TESTENV=(sudo -n tools/testenv/testenv.sh)

sudo -v || { echo "need sudo"; exit 1; }

logrun() {
  local label=$1
  shift
  stdbuf -oL "$@" 2>&1 | sed "s/^/[$label] /"
}

bg_pids=()
logrun_bg() {
  local label=$1
  shift
  stdbuf -oL "$@" 2>&1 | tee >(sed "s/^/[$label] /") >/dev/null &
  bg_pids+=($!)
}

cleanup() {
  for pid in "${bg_pids[@]}"; do
    kill "$pid" 2>/dev/null || true
    wait "$pid" 2>/dev/null || true
  done
}

trap cleanup EXIT SIGINT SIGTERM

usage() {
  echo "Usage: $0 [-s NUM_SERVERS]" >&2
  exit 1
}

# parse args
while getopts "s:" opt; do
  case $opt in
    s) NUM_SERVERS=$OPTARG ;;
    *) usage ;;
  esac
done

export RUST_LOG=info

# 1. build
cargo build --release

# 2. set up servers
for i in $(seq 1 "$NUM_SERVERS"); do
  env="server$i"

  "${TESTENV[@]}" setup --name "$env" --legacy-ip || true

  # veth devices won't deliver redirected/retransmitted XDP frames unless an XDP program is attached to the receiving side of the target veth interface
  logrun_bg "$env" "${TESTENV[@]}" exec -n "$env" -- \
    bash -c "RUST_LOG=info target/release/xdp-pass --iface veth0"

  logrun_bg "$env" sudo -E target/release/abd-server \
    --iface "$env" --server-id "$i"
done

# 3. set up the writer
"${TESTENV[@]}" setup --name writer --legacy-ip || true

logrun_bg "writer" "${TESTENV[@]}" exec -n writer -- \
  bash -c "RUST_LOG=info target/release/xdp-pass --iface veth0"

logrun_bg "writer" sudo -E target/release/abd-writer \
  --iface writer --redirect-iface server1

# 4. wait a moment
sleep 1

# 5. run the client against each server
echo
for i in $(seq 1 "$NUM_SERVERS"); do
  env="server$i"
  # extract that serverâ€™s IP
  ip=$(
    "${TESTENV[@]}" -n "$env" status \
      | awk '/Iface:/ {print $4}' \
      | cut -d'/' -f1
  )
  logrun "client" "${TESTENV[@]}" exec -n writer -- bash -c "
    target/release/abd-client $ip $i write 1 42 1
  "
  # && target/release/abd-client $ip $i read 2
done
